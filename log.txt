**** BEGIN TEST: Expect Function****
Running Test 1: Expecting number works with number.
-- [Test 1 Passed!] --
Running Test 2: Expecting number fails when not a number.
DOMutils/class_test_3.lua:76: bad argument #1 (expected number, got string)
-- [Test 2 Passed!] --
Running Test 3: Expecting string works.
-- [Test 3 Passed!] --
Running Test 4: Expecting string fails when not a string.
DOMutils/class_test_3.lua:79: bad argument #1 (expected string, got number)
-- [Test 4 Passed!] --
Running Test 5: Expecting boolean works.
-- [Test 5 Passed!] --
Running Test 6: Expecting boolean fails when not a string.
DOMutils/class_test_3.lua:82: bad argument #1 (expected boolean, got string)
-- [Test 6 Passed!] --
Running Test 7: Expecting function works.
-- [Test 7 Passed!] --
Running Test 8: Expecting function fails when not a function
DOMutils/class_test_3.lua:85: bad argument #1 (expected function, got string)
-- [Test 8 Passed!] --
Running Test 9: Expecting table works.
-- [Test 9 Passed!] --
Running Test 10: Expecting table fails when not table.
DOMutils/class_test_3.lua:88: bad argument #1 (expected table, got number)
-- [Test 10 Passed!] --
Running Test 11: Expecting class works.
-- [Test 11 Passed!] --
Running Test 12: Expecting class multiple types works.
-- [Test 12 Passed!] --
Running Test 13: Expecting class fails when instance.
DOMutils/class_test_3.lua:92: bad argument #1 (expected class, got Animal)
-- [Test 13 Passed!] --
Running Test 14: Expecting class fails when instance multiple arguments.
DOMutils/class_test_3.lua:93: bad argument #1 (expected class, string, got Animal)
-- [Test 14 Passed!] --
Running Test 15: Expecting class fails when non-class table.
DOMutils/class_test_3.lua:95: bad argument #1 (expected class, got table)
-- [Test 15 Passed!] --
Running Test 16: Expecting class fails when not class or table.
DOMutils/class_test_3.lua:96: bad argument #1 (expected class, got string)
-- [Test 16 Passed!] --
Running Test 17: Expecting subclass class works.
-- [Test 17 Passed!] --
Running Test 18: Expecting subclass fails when instance.
DOMutils/class_test_3.lua:99: bad argument #1 (expected class, got Canid)
-- [Test 18 Passed!] --
Running Test 19: Expecting subclassclass works when subclass.
-- [Test 19 Passed!] --
Running Test 20: Expecting parent class fails when instance.
DOMutils/class_test_3.lua:102: bad argument #1 (expected instance of Canid, got Animal)
-- [Test 20 Passed!] --
Running Test 21: Expecting subclass when superclass - Polymorphism
-- [Test 21 Passed!] --
Running Test 22: Expecting subclass when superclass fails when class is passed - Class is not instance.
DOMutils/class_test_3.lua:104: bad argument #1 (expected instance of Animal, got class)
-- [Test 22 Passed!] --
Running Test 23: Expecting subclass when superclass fails when class is passed - Class is not instance.
DOMutils/class_test_3.lua:105: bad argument #1 (expected instance of Animal, number, string, got class)
-- [Test 23 Passed!] --
**** TEST RESULTS: ****
Tests 1-23 Concluded.
Test 1 Passed!
Test 2 Passed!
Test 3 Passed!
Test 4 Passed!
Test 5 Passed!
Test 6 Passed!
Test 7 Passed!
Test 8 Passed!
Test 9 Passed!
Test 10 Passed!
Test 11 Passed!
Test 12 Passed!
Test 13 Passed!
Test 14 Passed!
Test 15 Passed!
Test 16 Passed!
Test 17 Passed!
Test 18 Passed!
Test 19 Passed!
Test 20 Passed!
Test 21 Passed!
Test 22 Passed!
Test 23 Passed!
23 Passed, 0 Failed.
**** END TEST: Expect Function****

**** BEGIN TEST: Base Class + Encapsulation****
Running Test 1: Ensure reading public properties works.
-->Expected: -5,  Recieved: -5
-- [Test 1 Passed!] --
Running Test 2: Ensure reading default public properties works.
-->Expected: 20,  Recieved: 20
-- [Test 2 Passed!] --
Running Test 3: Ensure reading readonly properties via __index works.
-->Expected: 5,  Recieved: 5
-- [Test 3 Passed!] --
Running Test 4: Ensure reading readonly via _readonly works
-->Expected: 5,  Recieved: 5
-- [Test 4 Passed!] --
Running Test 5: Ensure read-only variables can't be set.
DOMutils/class_test_3.lua:118: Attempt to set read-only variable readonly
-- [Test 5 Passed!] --
Running Test 6: Ensure private variables can't be read.
DOMutils/class_test_3.lua:120: Attempt to access private variable private
-- [Test 6 Passed!] --
Running Test 7: Ensure private variable accessable by __.
-->Expected: 10,  Recieved: 10
-- [Test 7 Passed!] --
**** TEST RESULTS: ****
Tests 1-7 Concluded.
Test 1 Passed!
Test 2 Passed!
Test 3 Passed!
Test 4 Passed!
Test 5 Passed!
Test 6 Passed!
Test 7 Passed!
7 Passed, 0 Failed.
**** END TEST: Base Class + Encapsulation****

**** BEGIN TEST: Interhitance + Encapsulation****
Running Test 1: Ensure reading overridden public property works.
-->Expected: 7,  Recieved: 7
-- [Test 1 Passed!] --
Running Test 2: Ensure reading inherited public property works.
-->Expected: 20,  Recieved: 20
-- [Test 2 Passed!] --
Running Test 3: Ensure reading overridden readonly property from __index works.
-->Expected: 15,  Recieved: 15
-- [Test 3 Passed!] --
Running Test 4: Ensure reading inherited readonly property from __index works.
-->Expected: 5,  Recieved: 5
-- [Test 4 Passed!] --
Running Test 5: Ensure reading overridden readonly property via _ works.
-->Expected: 15,  Recieved: 15
-- [Test 5 Passed!] --
Running Test 6: Ensure reading inherited readonly property via _ works.
-->Expected: 5,  Recieved: 5
-- [Test 6 Passed!] --
Running Test 7: Ensure reading new readonly property via _ works.
-->Expected: -6,  Recieved: -6
-- [Test 7 Passed!] --
Running Test 8: Ensure reading new readonly property via _ works.
-->Expected: -6,  Recieved: -6
-- [Test 8 Passed!] --
Running Test 9: Ensure setting new read only property fails
DOMutils/classutils.lua:226: Attempt to set read-only variable readonly3
-- [Test 9 Passed!] --
Running Test 10: Ensure setting inherited read only property fails
DOMutils/classutils.lua:226: Attempt to set read-only variable readonly2
-- [Test 10 Passed!] --
Running Test 11: Ensure reading new private property fails.
DOMutils/class_test_3.lua:144: Attempt to access private variable private3
-- [Test 11 Passed!] --
Running Test 12: Ensure reading inherited property fails.
DOMutils/classutils.lua:181: Attempt to access private variable private2
-- [Test 12 Passed!] --
Running Test 13: Ensure reading new private property via _ works.
-->Expected: "Fuck you",  Recieved: "Fuck you"
-- [Test 13 Passed!] --
Running Test 14: Ensure reading inherited private property via _ works.
-->Expected: 2,  Recieved: 2
-- [Test 14 Passed!] --
Running Test 15: Ensure Type works on base instance.
-->Expected: "Animal",  Recieved: "Animal"
-- [Test 15 Passed!] --
Running Test 16: Ensure Type works on base class.
-->Expected: "class",  Recieved: "class"
-- [Test 16 Passed!] --
Running Test 17: Ensure Type works on base instance.
-->Expected: "Canid",  Recieved: "Canid"
-- [Test 17 Passed!] --
Running Test 18: Ensure Type works on base class.
-->Expected: "class",  Recieved: "class"
-- [Test 18 Passed!] --
Running Test 19: Ensure Type works on primitives.
-->Expected: "number",  Recieved: "number"
-- [Test 19 Passed!] --
Running Test 20: Ensure instanceof works on same class.
-->Expected: true,  Recieved: true
-- [Test 20 Passed!] --
Running Test 21: Ensure instanceof works on same subclass.
-->Expected: true,  Recieved: true
-- [Test 21 Passed!] --
Running Test 22: Ensure instanceof works on parent class.
-->Expected: true,  Recieved: true
-- [Test 22 Passed!] --
Running Test 23: Ensure instanceof fails on child class.
-->Expected: false,  Recieved: false
-- [Test 23 Passed!] --
Running Test 24: Ensure instanceof class works on same class.
-->Expected: true,  Recieved: true
-- [Test 24 Passed!] --
Running Test 25: Ensure instanceof class works on same subclass.
-->Expected: true,  Recieved: true
-- [Test 25 Passed!] --
Running Test 26: Ensure instanceof class works on parent class.
-->Expected: true,  Recieved: true
-- [Test 26 Passed!] --
Running Test 27: Ensure instanceof class fails on child class.
-->Expected: false,  Recieved: false
-- [Test 27 Passed!] --
Running Test 28: Ensure class instance:instanceof works on same class.
-->Expected: true,  Recieved: true
-- [Test 28 Passed!] --
Running Test 29: Ensure child instance:instanceof works on same class.
-->Expected: true,  Recieved: true
-- [Test 29 Passed!] --
Running Test 30: Ensure class instance:instanceof works on same class.
-->Expected: true,  Recieved: true
-- [Test 30 Passed!] --
Running Test 31: Ensure child instance:instanceof works on same class.
-->Expected: true,  Recieved: true
-- [Test 31 Passed!] --
Running Test 32: Ensure child instance:instanceof fails on parent class.
-->Expected: false,  Recieved: false
-- [Test 32 Passed!] --
Running Test 33: Ensure class instanceof fails on parent class.
-->Expected: false,  Recieved: false
-- [Test 33 Passed!] --
**** TEST RESULTS: ****
Tests 1-33 Concluded.
Test 1 Passed!
Test 2 Passed!
Test 3 Passed!
Test 4 Passed!
Test 5 Passed!
Test 6 Passed!
Test 7 Passed!
Test 8 Passed!
Test 9 Passed!
Test 10 Passed!
Test 11 Passed!
Test 12 Passed!
Test 13 Passed!
Test 14 Passed!
Test 15 Passed!
Test 16 Passed!
Test 17 Passed!
Test 18 Passed!
Test 19 Passed!
Test 20 Passed!
Test 21 Passed!
Test 22 Passed!
Test 23 Passed!
Test 24 Passed!
Test 25 Passed!
Test 26 Passed!
Test 27 Passed!
Test 28 Passed!
Test 29 Passed!
Test 30 Passed!
Test 31 Passed!
Test 32 Passed!
Test 33 Passed!
33 Passed, 0 Failed.
**** END TEST: Interhitance + Encapsulation****

**** BEGIN TEST: Getters and Setters****
Running Test 1: Ensure base class getter works.
-->Expected: 1,  Recieved: 1
-- [Test 1 Passed!] --
Running Test 2: Ensure base class setter works.
-->Expected: 5,  Recieved: 5
-- [Test 2 Passed!] --
Running Test 3: Ensure inherited class getter works.
-->Expected: 1,  Recieved: 1
-- [Test 3 Passed!] --
Running Test 4: Ensure inherited class setter works.
-->Expected: 5,  Recieved: 5
-- [Test 4 Passed!] --
Running Test 5: Ensure subclass getter works.
-->Expected: 3,  Recieved: 3
-- [Test 5 Passed!] --
Running Test 6: Ensure subclass setter works.
-->Expected: 6,  Recieved: 6
-- [Test 6 Passed!] --
**** TEST RESULTS: ****
Tests 1-6 Concluded.
Test 1 Passed!
Test 2 Passed!
Test 3 Passed!
Test 4 Passed!
Test 5 Passed!
Test 6 Passed!
6 Passed, 0 Failed.
**** END TEST: Getters and Setters****

**** BEGIN TEST: Test assertImplementsParent; which checks if the subclass implements all the methods of its superclass.****
Running Test 1: Ensure errors when instance supplied.
DOMutils/classutils.lua:246: bad argument #1 (expected class, got Animal)
-- [Test 1 Passed!] --
Running Test 2: Ensure errors when subclass instance supplied.
DOMutils/classutils.lua:246: bad argument #1 (expected class, got Canid)
-- [Test 2 Passed!] --
Running Test 3: Ensure error when supplied class has no parent.
DOMutils/classutils.lua:250: class AbstractBaseClass has no parent.
-- [Test 3 Passed!] --
Running Test 4: Ensure error when supplied non-abstract class has no parent.
DOMutils/classutils.lua:250: class Animal has no parent.
-- [Test 4 Passed!] --
Running Test 5: Ensure errors when non-instance table supplied.
DOMutils/classutils.lua:246: bad argument #1 (expected class, got nil)
-- [Test 5 Passed!] --
Running Test 6: Ensure errors when subclass doesnt implement parent class.
DOMutils/class_test_3.lua:229: class ConcreteClass doesn't implement method abstractMethod2 from parent class AbstractBaseClass.
-- [Test 6 Passed!] --
Running Test 7: Ensure errors when subclass doesnt implement part of parent class.
DOMutils/class_test_3.lua:235: class ConcreteClass doesn't implement method abstractMethod from parent class AbstractBaseClass.
-- [Test 7 Passed!] --
Running Test 8: Ensure errors when subclass includes an abstract method is used to implement the parent's.
DOMutils/class_test_3.lua:242: class ConcreteClass doesn't implement getter _ggetter from parent class AbstractBaseClass.
-- [Test 8 Passed!] --
Running Test 9: Ensure errors when subclass doesnt implement getter.
DOMutils/class_test_3.lua:248: class ConcreteClass doesn't implement getter _ggetter from parent class AbstractBaseClass.
-- [Test 9 Passed!] --
Running Test 10: Ensure passes when subclass fully implements parent class's methods
-- [Test 10 Passed!] --
Running Test 11: Ensure errors when abstract class's parent is not implemented.
DOMutils/class_test_3.lua:275: class AbstractChildClass2 doesn't implement method abstractMethod from parent class AbstractBaseClass.
-- [Test 11 Passed!] --
Running Test 12: Ensure errors when abstract class's parent is not implemented.
DOMutils/class_test_3.lua:281: class ChildOfAbstractClass2 doesn't implement method abstractMethod3 from parent class AbstractChildClass2.
-- [Test 12 Passed!] --
**** TEST RESULTS: ****
Tests 1-12 Concluded.
Test 1 Passed!
Test 2 Passed!
Test 3 Passed!
Test 4 Passed!
Test 5 Passed!
Test 6 Passed!
Test 7 Passed!
Test 8 Passed!
Test 9 Passed!
Test 10 Passed!
Test 11 Passed!
Test 12 Passed!
12 Passed, 0 Failed.
**** END TEST: Test assertImplementsParent; which checks if the subclass implements all the methods of its superclass.****

